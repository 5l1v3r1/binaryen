/*
 * Copyright 2020 WebAssembly Community Group participants
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//=============================================================================
// This is an AUTOGENERATED file, even though it looks human-readable! Do not
// edit it by hand, instead edit what it is generated from. You can and should
// treat it like human-written code in all other ways, though, like reviewing
// it in a PR, etc.
//=============================================================================
case Expression::NopId: {

  break;
}
case Expression::BlockId: {
  if (left->name != right->name) {
    return false;
  }
  if (left->list != right->list) {
    return false;
  }
  break;
}
case Expression::IfId: {
  if (left->condition != right->condition) {
    return false;
  }
  if (left->ifTrue != right->ifTrue) {
    return false;
  }
  if (left->ifFalse != right->ifFalse) {
    return false;
  }
  break;
}
case Expression::LoopId: {
  if (left->name != right->name) {
    return false;
  }
  if (left->body != right->body) {
    return false;
  }
  break;
}
case Expression::BreakId: {
  if (left->name != right->name) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  if (left->condition != right->condition) {
    return false;
  }
  break;
}
case Expression::SwitchId: {
  if (left->targets != right->targets) {
    return false;
  }
  if (left->default_ != right->default_) {
    return false;
  }
  if (left->condition != right->condition) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::CallId: {
  if (left->operands != right->operands) {
    return false;
  }
  if (left->target != right->target) {
    return false;
  }
  if (left->isReturn != right->isReturn) {
    return false;
  }
  break;
}
case Expression::CallIndirectId: {
  if (left->sig != right->sig) {
    return false;
  }
  if (left->operands != right->operands) {
    return false;
  }
  if (left->target != right->target) {
    return false;
  }
  if (left->isReturn != right->isReturn) {
    return false;
  }
  break;
}
case Expression::LocalGetId: {
  if (left->index != right->index) {
    return false;
  }
  break;
}
case Expression::LocalSetId: {
  if (left->index != right->index) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::GlobalGetId: {
  if (left->name != right->name) {
    return false;
  }
  break;
}
case Expression::GlobalSetId: {
  if (left->name != right->name) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::LoadId: {
  if (left->bytes != right->bytes) {
    return false;
  }
  if (LoadUtils::isSignRelevant(left)) {
    if (left->signed_ != right->signed_) {
      return false;
    }
  }
  if (left->offset != right->offset) {
    return false;
  }
  if (left->align != right->align) {
    return false;
  }
  if (left->isAtomic != right->isAtomic) {
    return false;
  }
  if (left->ptr != right->ptr) {
    return false;
  }
  break;
}
case Expression::StoreId: {
  if (left->bytes != right->bytes) {
    return false;
  }
  if (left->offset != right->offset) {
    return false;
  }
  if (left->align != right->align) {
    return false;
  }
  if (left->isAtomic != right->isAtomic) {
    return false;
  }
  if (left->ptr != right->ptr) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  if (left->valueType != right->valueType) {
    return false;
  }
  break;
}
case Expression::AtomicRMWId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->bytes != right->bytes) {
    return false;
  }
  if (left->offset != right->offset) {
    return false;
  }
  if (left->ptr != right->ptr) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::AtomicCmpxchgId: {
  if (left->bytes != right->bytes) {
    return false;
  }
  if (left->offset != right->offset) {
    return false;
  }
  if (left->ptr != right->ptr) {
    return false;
  }
  if (left->expected != right->expected) {
    return false;
  }
  if (left->replacement != right->replacement) {
    return false;
  }
  break;
}
case Expression::AtomicWaitId: {
  if (left->offset != right->offset) {
    return false;
  }
  if (left->ptr != right->ptr) {
    return false;
  }
  if (left->expected != right->expected) {
    return false;
  }
  if (left->timeout != right->timeout) {
    return false;
  }
  if (left->expectedType != right->expectedType) {
    return false;
  }
  break;
}
case Expression::AtomicNotifyId: {
  if (left->offset != right->offset) {
    return false;
  }
  if (left->ptr != right->ptr) {
    return false;
  }
  if (left->notifyCount != right->notifyCount) {
    return false;
  }
  break;
}
case Expression::AtomicFenceId: {
  if (left->order != right->order) {
    return false;
  }
  break;
}
case Expression::SIMDExtractId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->vec != right->vec) {
    return false;
  }
  if (left->index != right->index) {
    return false;
  }
  break;
}
case Expression::SIMDReplaceId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->vec != right->vec) {
    return false;
  }
  if (left->index != right->index) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::SIMDShuffleId: {
  if (left->left != right->left) {
    return false;
  }
  if (left->right != right->right) {
    return false;
  }
  if (left->mask != right->mask) {
    return false;
  }
  break;
}
case Expression::SIMDTernaryId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->a != right->a) {
    return false;
  }
  if (left->b != right->b) {
    return false;
  }
  if (left->c != right->c) {
    return false;
  }
  break;
}
case Expression::SIMDShiftId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->vec != right->vec) {
    return false;
  }
  if (left->shift != right->shift) {
    return false;
  }
  break;
}
case Expression::SIMDLoadId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->offset != right->offset) {
    return false;
  }
  if (left->align != right->align) {
    return false;
  }
  if (left->ptr != right->ptr) {
    return false;
  }
  break;
}
case Expression::MemoryInitId: {
  if (left->segment != right->segment) {
    return false;
  }
  if (left->dest != right->dest) {
    return false;
  }
  if (left->offset != right->offset) {
    return false;
  }
  if (left->size != right->size) {
    return false;
  }
  break;
}
case Expression::DataDropId: {
  if (left->segment != right->segment) {
    return false;
  }
  break;
}
case Expression::MemoryCopyId: {
  if (left->dest != right->dest) {
    return false;
  }
  if (left->source != right->source) {
    return false;
  }
  if (left->size != right->size) {
    return false;
  }
  break;
}
case Expression::MemoryFillId: {
  if (left->dest != right->dest) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  if (left->size != right->size) {
    return false;
  }
  break;
}
case Expression::ConstId: {
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::UnaryId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::BinaryId: {
  if (left->op != right->op) {
    return false;
  }
  if (left->left != right->left) {
    return false;
  }
  if (left->right != right->right) {
    return false;
  }
  break;
}
case Expression::SelectId: {
  if (left->ifTrue != right->ifTrue) {
    return false;
  }
  if (left->ifFalse != right->ifFalse) {
    return false;
  }
  if (left->condition != right->condition) {
    return false;
  }
  break;
}
case Expression::DropId: {
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::ReturnId: {
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::MemorySizeId: {
  if (left->ptrType != right->ptrType) {
    return false;
  }
  break;
}
case Expression::MemoryGrowId: {
  if (left->delta != right->delta) {
    return false;
  }
  if (left->ptrType != right->ptrType) {
    return false;
  }
  break;
}
case Expression::UnreachableId: {

  break;
}
case Expression::PopId: {

  break;
}
case Expression::RefNullId: {

  break;
}
case Expression::RefIsNullId: {
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::RefFuncId: {
  if (left->func != right->func) {
    return false;
  }
  break;
}
case Expression::RefEqId: {
  if (left->left != right->left) {
    return false;
  }
  if (left->right != right->right) {
    return false;
  }
  break;
}
case Expression::TryId: {
  if (left->body != right->body) {
    return false;
  }
  if (left->catchBody != right->catchBody) {
    return false;
  }
  break;
}
case Expression::ThrowId: {
  if (left->event != right->event) {
    return false;
  }
  if (left->operands != right->operands) {
    return false;
  }
  break;
}
case Expression::RethrowId: {
  if (left->exnref != right->exnref) {
    return false;
  }
  break;
}
case Expression::BrOnExnId: {
  if (left->name != right->name) {
    return false;
  }
  if (left->event != right->event) {
    return false;
  }
  if (left->exnref != right->exnref) {
    return false;
  }
  if (left->sent != right->sent) {
    return false;
  }
  break;
}
case Expression::TupleMakeId: {
  if (left->operands != right->operands) {
    return false;
  }
  break;
}
case Expression::TupleExtractId: {
  if (left->tuple != right->tuple) {
    return false;
  }
  if (left->index != right->index) {
    return false;
  }
  break;
}
case Expression::I31NewId: {
  if (left->value != right->value) {
    return false;
  }
  break;
}
case Expression::I31GetId: {
  if (left->i31 != right->i31) {
    return false;
  }
  if (left->signed_ != right->signed_) {
    return false;
  }
  break;
}
case Expression::RefTestId: {

  break;
}
case Expression::RefCastId: {

  break;
}
case Expression::BrOnCastId: {

  break;
}
case Expression::RttCanonId: {

  break;
}
case Expression::RttSubId: {

  break;
}
case Expression::StructNewId: {

  break;
}
case Expression::StructGetId: {

  break;
}
case Expression::StructSetId: {

  break;
}
case Expression::ArrayNewId: {

  break;
}
case Expression::ArrayGetId: {

  break;
}
case Expression::ArraySetId: {

  break;
}
case Expression::ArrayLenId: {

  break;
}
